are you familiar with npm ls --all

...

here's a small example of the output format

example3@1.0.0 /path/to/project
├─┬ server@1.0.0 -> ./server
│ └─┬ tsx@4.19.0
│   ├─┬ esbuild@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/aix-ppc64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/android-arm@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/android-arm64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/android-x64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/darwin-arm64@0.23.1
│   │ ├── @esbuild/darwin-x64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/freebsd-arm64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/freebsd-x64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/linux-arm@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/linux-arm64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/linux-ia32@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/linux-loong64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/linux-mips64el@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/linux-ppc64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/linux-riscv64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/linux-s390x@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/linux-x64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/netbsd-x64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/openbsd-arm64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/openbsd-x64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/sunos-x64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/win32-arm64@0.23.1
│   │ ├── UNMET OPTIONAL DEPENDENCY @esbuild/win32-ia32@0.23.1
│   │ └── UNMET OPTIONAL DEPENDENCY @esbuild/win32-x64@0.23.1
│   ├── UNMET OPTIONAL DEPENDENCY fsevents@~2.3.3
│   └─┬ get-tsconfig@4.8.0
│     └── resolve-pkg-maps@1.0.0
└─┬ shared@1.0.0 -> ./shared
  └── typescript@5.5.4


can you write a python program that reads this into a tree data structure

use the following approach

- the line consists of a "first half" and a "second half"
- we know we're done with the first half once we find the first letter or @
- the first half is made of whitespace and box drawing characters (if we see any unexpected character, raise an error)
- the second half is made of printable ascii characters (if we see any unexpected character, raise an error)
- use the length of the "first half" as the indentation size
- use indentation to determine tree structure
- don't need to parse the second half, just treat it as a string
